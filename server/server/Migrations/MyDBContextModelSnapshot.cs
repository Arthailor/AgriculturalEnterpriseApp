// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using server.Repository;

#nullable disable

namespace server.Migrations
{
    [DbContext(typeof(MyDBContext))]
    partial class MyDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("server.Models.Animal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("PastureId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("PastureId");

                    b.ToTable("Animals");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            Amount = 12,
                            Name = "Овцы",
                            PastureId = new Guid("66666666-6666-6666-6666-666666666666")
                        });
                });

            modelBuilder.Entity("server.Models.Crop", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("SeedCrops");

                    b.HasData(
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            Amount = 12,
                            Name = "Пшеница"
                        });
                });

            modelBuilder.Entity("server.Models.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            Address = "г. Могилёв",
                            Login = "vladimir",
                            Name = "Владимир",
                            Password = "1234",
                            Phone = "+375123456789",
                            Role = "Admin"
                        });
                });

            modelBuilder.Entity("server.Models.Equipment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DateBought")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("WarehouseId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("WarehouseId");

                    b.ToTable("MachineryEquipment");

                    b.HasData(
                        new
                        {
                            Id = new Guid("55555555-5555-5555-5555-555555555555"),
                            DateBought = new DateTime(2024, 11, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Трактор",
                            WarehouseId = new Guid("88888888-8888-8888-8888-888888888888")
                        });
                });

            modelBuilder.Entity("server.Models.EquipmentOnFields", b =>
                {
                    b.Property<Guid>("EquipmentId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("char(36)");

                    b.HasKey("EquipmentId", "FieldId");

                    b.HasIndex("FieldId");

                    b.ToTable("EquipmentOnFields");

                    b.HasData(
                        new
                        {
                            EquipmentId = new Guid("55555555-5555-5555-5555-555555555555"),
                            FieldId = new Guid("44444444-4444-4444-4444-444444444444")
                        });
                });

            modelBuilder.Entity("server.Models.Field", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CropId")
                        .HasColumnType("char(36)");

                    b.Property<double>("CultivatedArea")
                        .HasColumnType("double");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("UncultivatedArea")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("CropId");

                    b.ToTable("Fields");

                    b.HasData(
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            CropId = new Guid("22222222-2222-2222-2222-222222222222"),
                            CultivatedArea = 25.5,
                            Name = "Поле 1",
                            UncultivatedArea = 4.5
                        });
                });

            modelBuilder.Entity("server.Models.Pasture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<double>("Area")
                        .HasColumnType("double");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.ToTable("Pastures");

                    b.HasData(
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666666"),
                            Area = 5.5,
                            FieldId = new Guid("44444444-4444-4444-4444-444444444444"),
                            Name = "Пастбище 1"
                        });
                });

            modelBuilder.Entity("server.Models.RepairLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CauseOfBreakage")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DateOfBreakage")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateOfRepair")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("EquipmentId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EquipmentId");

                    b.ToTable("RepairLogs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("77777777-7777-7777-7777-777777777777"),
                            CauseOfBreakage = "Тряска",
                            DateOfBreakage = new DateTime(2024, 11, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfRepair = new DateTime(2024, 11, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = new Guid("33333333-3333-3333-3333-333333333333"),
                            EquipmentId = new Guid("55555555-5555-5555-5555-555555555555")
                        });
                });

            modelBuilder.Entity("server.Models.Warehouse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Warehouses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("88888888-8888-8888-8888-888888888888"),
                            UpdatedAt = new DateTime(2024, 11, 6, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("server.Models.WorkOnFields", b =>
                {
                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("char(36)");

                    b.HasKey("EmployeeId", "FieldId");

                    b.HasIndex("FieldId");

                    b.ToTable("WorkOnFields");

                    b.HasData(
                        new
                        {
                            EmployeeId = new Guid("33333333-3333-3333-3333-333333333333"),
                            FieldId = new Guid("44444444-4444-4444-4444-444444444444")
                        });
                });

            modelBuilder.Entity("server.Models.Animal", b =>
                {
                    b.HasOne("server.Models.Pasture", "Pasture")
                        .WithMany("Animals")
                        .HasForeignKey("PastureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pasture");
                });

            modelBuilder.Entity("server.Models.Equipment", b =>
                {
                    b.HasOne("server.Models.Warehouse", "Warehouse")
                        .WithMany("MachineryEquipment")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("server.Models.EquipmentOnFields", b =>
                {
                    b.HasOne("server.Models.Equipment", "Equipment")
                        .WithMany("EquipmentOnFields")
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Models.Field", "Field")
                        .WithMany("EquipmentOnFields")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Equipment");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("server.Models.Field", b =>
                {
                    b.HasOne("server.Models.Crop", "Crop")
                        .WithMany("Fields")
                        .HasForeignKey("CropId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crop");
                });

            modelBuilder.Entity("server.Models.Pasture", b =>
                {
                    b.HasOne("server.Models.Field", "Field")
                        .WithMany("Pastures")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Field");
                });

            modelBuilder.Entity("server.Models.RepairLog", b =>
                {
                    b.HasOne("server.Models.Employee", "Employee")
                        .WithMany("RepairLogs")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Models.Equipment", "Equipment")
                        .WithMany("RepairLogs")
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Equipment");
                });

            modelBuilder.Entity("server.Models.WorkOnFields", b =>
                {
                    b.HasOne("server.Models.Employee", "Employee")
                        .WithMany("WorkOnFields")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Models.Field", "Field")
                        .WithMany()
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("server.Models.Crop", b =>
                {
                    b.Navigation("Fields");
                });

            modelBuilder.Entity("server.Models.Employee", b =>
                {
                    b.Navigation("RepairLogs");

                    b.Navigation("WorkOnFields");
                });

            modelBuilder.Entity("server.Models.Equipment", b =>
                {
                    b.Navigation("EquipmentOnFields");

                    b.Navigation("RepairLogs");
                });

            modelBuilder.Entity("server.Models.Field", b =>
                {
                    b.Navigation("EquipmentOnFields");

                    b.Navigation("Pastures");
                });

            modelBuilder.Entity("server.Models.Pasture", b =>
                {
                    b.Navigation("Animals");
                });

            modelBuilder.Entity("server.Models.Warehouse", b =>
                {
                    b.Navigation("MachineryEquipment");
                });
#pragma warning restore 612, 618
        }
    }
}
